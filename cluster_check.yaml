---
- name: Check the status of the OpenShift 4 cluster
  hosts: localhost
  gather_facts: false
  connection: local  
  vars:
    ocp_username: "{{ lookup('env', 'OCP_USERNAME') }}"
    ocp_password: "{{ lookup('env', 'OCP_PASSWORD') }}"
    ocp_api_url: "{{ lookup('env', 'OCP_API_URL') }}"
    mail_host: "{{ lookup('env', 'MAIL_HOST') }}"
    mail_port: "{{ lookup('env', 'MAIL_PORT') }}"
    mail_username: "{{ lookup('env', 'MAIL_USERNAME') }}"
    mail_password: "{{ lookup('env', 'MAIL_PASSWORD') }}"
    mail_to: "{{ lookup('env', 'MAIL_TO') }}"
    mail_cc: "{{ lookup('env', 'MAIL_CC') }}"
    mail_sender: "{{ lookup('env', 'MAIL_SENDER') }}"

  collections:
    - kubernetes.core
    - community.general

  tasks:
    - name: Set up login credentials
      kubernetes.core.k8s_auth:
        validate_certs: false
        username: "{{ ocp_username }}"
        password: "{{ ocp_password }}"
        host: "{{ ocp_api_url }}"
      register: k8s_auth_results
      no_log: true      

    - name: Login into cluster
      ansible.builtin.shell: |
        oc login --token {{ k8s_auth_results.openshift_auth.api_key }} {{ k8s_auth_results.openshift_auth.host }} --insecure-skip-tls-verify
      no_log: true

    - name: Verify the connection to the cluster
      kubernetes.core.k8s_info:
        kind: ClusterVersion
        name: version
      register: k8s_version
      ignore_errors: true

    - name: Checks the status of cluster nodes
      kubernetes.core.k8s_info:
        kind: Node
      register: k8s_nodes
      ignore_errors: true

    - name: Get Openshift node names
      ansible.builtin.command: oc get nodes -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
      register: oc_output
      changed_when: false

    - name: Controls the available space on Openshift nodes
      ansible.builtin.shell: oc debug nodes/{{ item }} -- df -h --output=avail /
      register: df_output
      changed_when: false
      loop: "{{ oc_output.stdout_lines }}"

    - name: Extract the available space from the results
      ansible.builtin.set_fact:
         available_space_nodes: "{{ available_space_nodes | default([]) + [(item.stdout | split('\n'))[1] | replace(' ', '') | replace('G', '')] }}"
      loop: "{{ df_output.results }}"
      when:
        - item.rc == 0
        - item.stdout_lines | length >= 2

    - name: Set threshold value for available space
      ansible.builtin.set_fact:
        threshold: 20  # Imposta il valore di soglia desiderato (in GB)

    - name: Check available space on nodes
      ansible.builtin.set_fact:
        space_check_failed: "{{ available_space_nodes is defined and available_space_nodes | map('int') | min < threshold }}"        

    - name: Check the status of OpenShift services
      kubernetes.core.k8s_info:
        kind: Pod
        field_selectors:
          - status.phase!=Running
          - status.phase!=Completed
          - status.phase!=Succeeded
      register: k8s_pods
      ignore_errors: true

    - name: Check the status of cluster operators
      kubernetes.core.k8s_info:
        kind: ClusterOperator
        api_version: config.openshift.io/v1
      register: k8s_cluster_operators
      ignore_errors: true

    - name: Check the status of CephBlockPool in ODF
      kubernetes.core.k8s_info:
        kind: CephBlockPool
        api_version: ceph.rook.io/v1
      register: k8s_ceph_status
      ignore_errors: true

    - name: Check the status of Ceph in ODF
      kubernetes.core.k8s_info:
        kind: Pod
        api_version: v1
        namespace: openshift-storage
        label_selectors: "app=rook-ceph-operator"
      register: k8s_ceph_operator_pods
      ignore_errors: true

    - name: Run Ceph status check in ODF
      ansible.builtin.shell:
        cmd: oc exec -n openshift-storage -c rook-ceph-operator "{{ item }}" -- sh -c "ceph status --cluster=openshift-storage --conf=/var/lib/rook/openshift-storage/openshift-storage.config --keyring=/var/lib/rook/openshift-storage/client.admin.keyring"
      register: ceph_status
      with_items: "{{ k8s_ceph_operator_pods.resources | json_query('[].metadata.name') }}"
      ignore_errors: true

    - name: Run the available space check in Ceph ODF
      ansible.builtin.shell:
        cmd: oc exec -n openshift-storage -c rook-ceph-operator "{{ item }}" -- sh -c "ceph df --cluster=openshift-storage --conf=/var/lib/rook/openshift-storage/openshift-storage.config --keyring=/var/lib/rook/openshift-storage/client.admin.keyring"
      register: ceph_df
      with_items: "{{ k8s_ceph_operator_pods.resources | json_query('[].metadata.name') }}"
      ignore_errors: true

    - name: Extract the available space in Ceph ODF
      ansible.builtin.set_fact:
          available_space_ceph: "{{ ceph_df.results[0].stdout_lines | join('\n') | regex_findall('TOTAL\\s+\\d+\\.?\\d*\\s+\\w+\\s+(\\d+\\.?\\d*\\s+\\w+)') | first | regex_replace('\\s+\\w+', '') }}"
      when: ceph_df is defined

    - name: Extract the available space raw and unit in Ceph ODF
      ansible.builtin.set_fact:
        available_space_raw: "{{ ceph_df.results[0].stdout_lines | join('\n') | regex_findall('TOTAL\\s+\\d+\\.?\\d*\\s+\\w+\\s+(\\d+\\.?\\d*\\s+\\w+)') | first }}"

    - name: Setup Available space value
      ansible.builtin.set_fact:
        available_space_value: "{{ available_space_raw.split(' ', 1)[0] | float }}"

    - name: Setup Available space unit
      ansible.builtin.set_fact:
        available_space_unit: "{{ available_space_raw.split(' ', 1)[1] }}"

    - name: Convert TiB to GiB if necessary
      ansible.builtin.set_fact:
        available_space_ceph_gib: "{{ (available_space_value | float * 1024) | round(2) }}"
      when: available_space_unit == 'TiB'

    - name: Convert MiB to GiB
      ansible.builtin.set_fact:
        available_space_ceph_gib: "{{ (available_space_value | float / 1024) | round(2) }}"
      when: available_space_unit == 'MiB'

    - name: Keep GiB as is
      ansible.builtin.set_fact:
        available_space_ceph_gib: "{{ available_space_value | float | round(2) }}"
      when: available_space_unit == 'GiB'

    - name: Debug available space
      ansible.builtin.debug:
        var: available_space_ceph_gib

    - name: Define the variable 'checks' based on the results
      ansible.builtin.set_fact:
        checks: []

    - name: Add connection check results to the cluster
      ansible.builtin.set_fact:
        checks: "{{ checks + [{'name': 'Verifies the connection to the cluster', 'status': 'failed' if (k8s_version.resources | regex_search('\\s*Cluster version is') is none) else 'passed'}] }}"
      when: k8s_version is defined

    - name: Add the results of cluster node checks
      ansible.builtin.set_fact:
        checks: "{{ checks + [{'name': 'Verifies the status of the cluster nodes', 'status': 'failed' if k8s_nodes.rc is defined and k8s_nodes.rc != 0 else 'passed'}] }}"
      when: k8s_version is defined      

    - name: Add the results of OpenShift service checks.
      ansible.builtin.set_fact:
        checks: "{{ checks + [{'name': 'Verifies the status of OpenShift services', 'status': 'failed' if k8s_pods.rc is defined and k8s_pods.rc != 0 else 'passed'}] }}"
      when: k8s_pods is defined

    - name: Add cluster operator check results
      ansible.builtin.set_fact:
        checks: "{{ checks + [{'name': 'Verifies the status of cluster operators', 'status': 'failed' if k8s_cluster_operators.rc is defined and k8s_cluster_operators.rc != 0 else 'passed'}] }}"
      when: k8s_cluster_operators is defined

    - name: Add the results of CephBlockPool status checks in ODF
      ansible.builtin.set_fact:
        checks: "{{ checks + [{'name': 'Verifies the status of CephBlockPool in ODF', 'status': 'failed' if k8s_ceph_status.rc is defined and k8s_ceph_status.rc != 0 else 'passed'}] }}"
      when: k8s_ceph_status is defined

    - name: Add results of Ceph status checks in ODF
      ansible.builtin.set_fact:
        checks: "{{ checks + [{'name': 'Checks the status of Ceph in ODF', 'status': 'failed' if (ceph_status.results | selectattr('stdout_lines') | regex_search('\\s*HEALTH_OK') is none) else 'passed'}] }}"
      when: ceph_status is defined

    - name: Add the result of checking the available space in Ceph ODF
      ansible.builtin.set_fact:
        checks: "{{ checks + [{'name': 'Checks the available space in Ceph ODF', 'status': 'failed' if (available_space_ceph_gib is defined and available_space_ceph_gib | int < 200) else 'passed'}] }}"
      when: available_space_ceph_gib is defined

    - name: Add the result of checking the available space on the nodes
      ansible.builtin.set_fact:
        checks: "{{ checks + [{'name': 'Checks the available space on nodes', 'status': 'failed' if space_check_failed else 'passed'}] }}"
      when: available_space_nodes is defined

    - name: Create output directory if it doesn't exist
      ansible.builtin.file:
        path: output
        state: directory

    - name: Genera output CSV
      ansible.builtin.template:
        src: templates/output.j2
        dest: output/output.csv
      when: checks is defined and checks | length > 0
      ignore_errors: true

    - name: Genera output HTML
      register: generate_output_html
      ansible.builtin.template:
        src: templates/template.html.j2
        dest: output/output.html
      when: checks is defined and checks | length > 0

    - name: Send the output as an HTML email
      community.general.mail:
        host: "{{ mail_host }}"
        port: "{{ mail_port }}"
        username: "{{ mail_username }}"
        password: "{{ mail_password }}"
        to: "{{ mail_to }}"
        cc: "{{ mail_cc }}"
        sender: "{{ mail_sender }}"
        subject: "OpenShift State Control Report"
        body: "{{ lookup('file', 'output/output.html') }}"
        subtype: html
        charset: utf8        
      when: checks is defined and checks | selectattr('status', 'eq', 'failed') | list | length > 0 and mail_host is defined
